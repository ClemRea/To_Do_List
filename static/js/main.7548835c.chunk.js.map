{"version":3,"sources":["components/Tools/Store.jsx","components/Tools/Get.jsx","components/Tools/Has.jsx","components/Add.jsx","components/Delete.jsx","components/TaskList.jsx","components/Checkbox.jsx","components/TaskPager.jsx","components/button.jsx","components/ModeSwitcher.jsx","components/Page.jsx","App.js","reportWebVitals.js","index.js"],"names":["Store","key","value","localStorage","setItem","JSON","stringify","Get","parse","getItem","Has","Add","inputValue","tache","taches","push","todo","Delete","_ref","task","onDelete","taskClassName","isUrgent","React","createElement","className","id","onClick","updateTaches","filter","i","TaskList","tasks","sortedTask","_toConsumableArray","sort","a","b","urgent","Fragment","map","index","Checkbox","label","checked","onChange","_useState","useState","_useState2","_slicedToArray","isChecked","setIsChecked","htmlFor","type","e","newValue","target","TaskPager","currentPage","setCurrentPage","totalPages","Math","ceil","length","startIndex","endIndex","pagButton","Array","from","_","concat","slice","AddButton","modal","setModal","handleButtonClick","_useState3","_useState4","setInputValue","_useState5","_useState6","setTasks","_useState7","_useState8","useEffect","storedTask","handleDelete","taskToDelete","updateTasks","name","placeholder","trim","newTask","Toggle","handleChange","Page","isDark","setIsDark","document","body","setAttribute","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7548835c.chunk.js","sourcesContent":["function Store(key, value) {\r\n  localStorage.setItem(key, JSON.stringify(value));\r\n}\r\n\r\nexport default Store;\r\n","function Get(key) {\r\n  return JSON.parse(localStorage.getItem(key));\r\n}\r\n\r\nexport default Get;\r\n","function Has(key) {\r\n  return !!localStorage.getItem(key);\r\n}\r\n\r\nexport default Has;\r\n","import Store from \"./Tools/Store.jsx\";\r\nimport Get from \"./Tools/Get.jsx\";\r\nimport Has from \"./Tools/Has.jsx\";\r\n\r\nfunction Add(inputValue) {\r\n  // verifier s'il y a des produit dans le LS\r\n  if (!Has(\"Todo\")) {\r\n    const todo = [];\r\n    const tache = inputValue;\r\n    todo.push(tache);\r\n    Store(\"Todo\", todo);\r\n  } else {\r\n    const tache = inputValue;\r\n    let taches = Get(\"Todo\");\r\n    taches.push(tache);\r\n    Store(\"Todo\", taches);\r\n  }\r\n}\r\n\r\nexport default Add;\r\n","import React from \"react\";\r\nimport Get from \"./Tools/Get\";\r\nimport Store from \"./Tools/Store\";\r\n\r\nfunction Delete({ task, onDelete, isUrgent }) {\r\n  const handleDelete = () => {\r\n    const taches = Get(\"Todo\") || \"[]\";\r\n    const updateTaches = taches.filter((i) => i.task !== task);\r\n    Store(\"Todo\", updateTaches);\r\n\r\n    onDelete(task);\r\n  };\r\n\r\n  const taskClassName = isUrgent\r\n    ? \"liste_element urgent_task\"\r\n    : \"liste_element\";\r\n  return (\r\n    <li className={taskClassName} id=\"liste_element\">\r\n      {task}\r\n      <span className=\"icon_container\" onClick={handleDelete}>\r\n        <i className=\"fa-solid fa-trash poubelle\"></i>\r\n      </span>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Delete;\r\n","import React from \"react\";\r\nimport Delete from \"./Delete\";\r\nimport \"../styles/taskList.css\";\r\n\r\nfunction TaskList({ tasks, onDelete }) {\r\n  const sortedTask = [...tasks].sort((a, b) =>\r\n    a.urgent === b.urgent ? 0 : a.urgent ? -1 : 1\r\n  );\r\n  return (\r\n    <>\r\n      <ul className=\"liste_container\">\r\n        {sortedTask.map((task, index) => (\r\n          <Delete\r\n            key={index}\r\n            task={task.task}\r\n            onDelete={onDelete}\r\n            isUrgent={task.urgent}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/form.css\";\r\n\r\nfunction Checkbox({ label, checked, onChange }) {\r\n  const [isChecked, setIsChecked] = useState(checked);\r\n\r\n  const handleCheckboxChange = (e) => {\r\n    const newValue = e.target.checked;\r\n    setIsChecked(newValue);\r\n    if (onChange) {\r\n      onChange(newValue);\r\n    }\r\n  };\r\n  return (\r\n    <label htmlFor=\"urgent\" className=\"urgent\" id=\"urgent\">\r\n      {label}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={isChecked}\r\n        onChange={handleCheckboxChange}\r\n        id=\"urgent\"\r\n        className=\"urgent_checkbox\"\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Checkbox;\r\n","import React, { useState } from \"react\";\r\nimport TaskList from \"./TaskList\";\r\n\r\nfunction TaskPager({ tasks, onDelete }) {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const tasksPerPage = 7;\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  const totalPages = Math.ceil(tasks.length / tasksPerPage);\r\n  const startIndex = (currentPage - 1) * tasksPerPage;\r\n  const endIndex = startIndex + tasksPerPage;\r\n\r\n  const pagButton = Array.from({ length: totalPages }, (_, index) => (\r\n    <span\r\n      key={index}\r\n      className={`page_button ${currentPage === index + 1 ? \"active\" : \"\"}`}\r\n      onClick={() => handlePageChange(index + 1)}\r\n    >\r\n      {index + 1}\r\n    </span>\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <TaskList tasks={tasks.slice(startIndex, endIndex)} onDelete={onDelete} />\r\n      {totalPages > 1 && <div className=\"pagination\">{pagButton}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskPager;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Add from \"./Add.jsx\";\r\nimport TaskList from \"./TaskList.jsx\";\r\nimport Get from \"./Tools/Get.jsx\";\r\nimport Checkbox from \"./Checkbox.jsx\";\r\nimport Store from \"./Tools/Store.jsx\";\r\nimport TaskPager from \"./TaskPager.jsx\";\r\nimport \"../styles/modal.css\";\r\nimport \"../styles/form.css\";\r\nimport \"../styles/dark_mode.css\";\r\nimport \"../styles/task_pager.css\";\r\nimport \"../styles/utils/tel_resolution/tel_resolution.css\";\r\n\r\nfunction AddButton() {\r\n  const [modal, setModal] = useState(false);\r\n  const handleButtonClick = () => {\r\n    setModal(!modal);\r\n  };\r\n\r\n  // récupérer la valeur de l'input tache\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [tasks, setTasks] = useState([]);\r\n  const [isChecked, setIsChecked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const storedTask = Get(\"Todo\");\r\n    if (storedTask) {\r\n      setTasks(storedTask);\r\n    }\r\n  }, []);\r\n\r\n  const afficherTask = () => {\r\n    if (inputValue.trim() !== \"\") {\r\n      const newTask = { task: inputValue, urgent: isChecked };\r\n      Add(newTask);\r\n\r\n      // Ajoutez la nouvelle tâche avec la propriété inputValue\r\n      setTasks([...tasks, newTask]);\r\n\r\n      // Réinitialisez l'inputValue\r\n      setInputValue(\"\");\r\n      setIsChecked(false);\r\n\r\n      Store(\"Todo\", [...tasks, newTask]);\r\n\r\n      setModal(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = (taskToDelete) => {\r\n    const updateTasks = tasks.filter((task) => task.task !== taskToDelete);\r\n    setTasks(updateTasks);\r\n\r\n    Store(\"Todo\", updateTasks);\r\n  };\r\n\r\n  const handleCheckboxChange = (newValue) => {\r\n    setIsChecked(newValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"btn_container\">\r\n        <button\r\n          className=\"btn\"\r\n          id=\"add_btn\"\r\n          onClick={handleButtonClick}\r\n        ></button>\r\n      </div>\r\n      {tasks.length > 7 ? (\r\n        <TaskPager tasks={tasks} onDelete={handleDelete} />\r\n      ) : (\r\n        <TaskList tasks={tasks} onDelete={handleDelete} />\r\n      )}\r\n      {modal && (\r\n        <div className=\"modal\">\r\n          <div className=\"overlay\">\r\n            <div className=\"modal_content\" id=\"modal_content\">\r\n              <form className=\"form_container\" id=\"form_container\">\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"tache\"\r\n                  name=\"tache\"\r\n                  placeholder=\"Tâche :\"\r\n                  className=\"tache\"\r\n                  value={inputValue}\r\n                  onChange={(e) => setInputValue(e.target.value)}\r\n                />\r\n\r\n                <Checkbox\r\n                  label={\"Urgent\"}\r\n                  checked={isChecked}\r\n                  onChange={handleCheckboxChange}\r\n                />\r\n              </form>\r\n              <button\r\n                className=\"submit_btn\"\r\n                id=\"submit_btn\"\r\n                onClick={afficherTask}\r\n              >\r\n                AJOUTER\r\n              </button>\r\n              <button className=\"close_modal\" onClick={handleButtonClick}>\r\n                <span className=\"line l1\"></span>\r\n                <span className=\"line l2\"></span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddButton;\r\n","import React from \"react\";\r\nimport \"../styles/dark_mode.css\";\r\n\r\nexport const Toggle = ({ handleChange, isChecked }) => {\r\n  return (\r\n    <div className=\"toggle_container\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"check\"\r\n        className=\"toggle\"\r\n        onChange={handleChange}\r\n        checked={isChecked}\r\n      />\r\n      <label htmlFor=\"check\" className=\"label_text\">\r\n        Dark Mode\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport AddButton from \"./button\";\r\nimport { Toggle } from \"./ModeSwitcher\";\r\nimport Get from \"./Tools/Get\";\r\nimport Store from \"./Tools/Store\";\r\nimport \"../styles/header.css\";\r\nimport \"../styles/button.css\";\r\n\r\nfunction Page() {\r\n  const [isDark, setIsDark] = useState(Get(\"darkMode\") === true);\r\n\r\n  useEffect(() => {\r\n    Store(\"darkMode\", isDark);\r\n    document.body.setAttribute(\"data-theme\", isDark ? \"dark\" : \"light\");\r\n  }, [isDark]);\r\n\r\n  return (\r\n    <div className=\"header_container\" id=\"card_todo\">\r\n      <Toggle isChecked={isDark} handleChange={() => setIsDark(!isDark)} />\r\n      <h1 className=\"titre_h1\" id=\"titre_h1\">\r\n        A Faire :\r\n      </h1>\r\n      <AddButton />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","import Page from \"./components/Page\";\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}